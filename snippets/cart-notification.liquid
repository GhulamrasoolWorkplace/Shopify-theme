<cart-notification>
  <div class="cart-notification-wrapper page-width">
    <div id="cart-notification" class="cart-notification focus-inset" aria-modal="true" aria-label="{{ 'general.cart.item_added' | t }}" role="dialog" tabindex="-1">
      <div class="cart-notification__header">
        <h2 class="cart-notification__heading caption-large text-body">{%- render 'icon-checkmark' -%} {{ 'general.cart.item_added' | t }}</h2>
        <button type="button" class="cart-notification__close modal__close-button link link--text focus-inset" aria-label="{{ 'accessibility.close' | t }}">
          <svg class="icon icon-close" aria-hidden="true" focusable="false">
            <use href="#icon-close">
          </svg>
        </button>
      </div>
      <div id="cart-notification-product" class="cart-notification-product"></div>
      <div class="cart-notification__links">
        <a href="{{ routes.cart_url }}" id="cart-notification-button" class="button button--secondary button--full-width"></a>
        <form action="{{ routes.cart_url }}" method="post" id="cart">
          <button class="button button--primary button--full-width" name="checkout">{{ 'sections.cart.checkout' | t }}</button>
        </form>
        <button type="button" class="link button-label">{{ 'general.continue_shopping' | t }}</button>
      </div>
    </div>
  </div>
</cart-notification>
{% style %}
  .cart-notification {
     display: none;
  }
{% endstyle %}

{% javascript %}
  class CartNotification extends HTMLElement {
    constructor() {
      super();

      this.notification = document.getElementById('cart-notification');
      this.header = document.querySelector('sticky-header');
      this.onBodyClick = this.handleBodyClick.bind(this);
      
      this.notification.addEventListener('keyup', (evt) => evt.code === 'Escape' && this.close());
      this.querySelectorAll('button[type="button"]').forEach((closeButton) =>
        closeButton.addEventListener('click', this.close.bind(this))
      );
    }

    open() {
      this.notification.classList.add('animate', 'active');
      this.notification.addEventListener('transitionend', () => {
        this.notification.focus();
        trapFocus(this.notification);
      }, { once: true });

      document.body.addEventListener('click', this.onBodyClick);
    }

    close() {
      this.notification.classList.remove('active');
      removeTrapFocus(this.activeElement);
      document.body.removeEventListener('click', this.onBodyClick);
    }

    renderContents(parsedState) {
        this.cartItemKey = parsedState.key;
        this.getSectionsToRender().forEach((section => {
          document.getElementById(section.id).innerHTML =
            this.getSectionInnerHTML(parsedState.sections[section.id], section.selector);
        }));

        this.open();
    }

    getSectionsToRender() {
      return [
        {
          id: 'cart-notification-product',
          selector: `#cart-notification-product-${this.cartItemKey}`,
        },
        {
          id: 'cart-notification-button'
        },
        {
          id: 'cart-icon-bubble'
        }
      ];
    }

    getSectionInnerHTML(html, selector = '.shopify-section') {
      return new DOMParser()
        .parseFromString(html, 'text/html')
        .querySelector(selector).innerHTML;
    }

    handleBodyClick(evt) {
      const target = evt.target;
      if (target !== this.notification && !target.closest('cart-notification')) {
        const disclosure = target.closest('details-disclosure');
        this.activeElement = disclosure ? disclosure.querySelector('summary') : null;
        this.close();
      }
    }

    setActiveElement(element) {
      this.activeElement = element;
    }
  }

  customElements.define('cart-notification', CartNotification);
{% endjavascript %} 